// Code generated by MockGen. DO NOT EDIT.
// Source: analyser_structs.go

// Package analyser is a generated GoMock package.
package analyser

import (
	repository "anomaly_detector/internal/repository"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	reflect "reflect"
)

// MockIAnalyser is a mock of IAnalyser interface
type MockIAnalyser struct {
	ctrl     *gomock.Controller
	recorder *MockIAnalyserMockRecorder
}

// MockIAnalyserMockRecorder is the mock recorder for MockIAnalyser
type MockIAnalyserMockRecorder struct {
	mock *MockIAnalyser
}

// NewMockIAnalyser creates a new mock instance
func NewMockIAnalyser(ctrl *gomock.Controller) *MockIAnalyser {
	mock := &MockIAnalyser{ctrl: ctrl}
	mock.recorder = &MockIAnalyserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAnalyser) EXPECT() *MockIAnalyserMockRecorder {
	return m.recorder
}

// GetCurrentState mocks base method
func (m *MockIAnalyser) GetCurrentState() []repository.EventAnalysed {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentState")
	ret0, _ := ret[0].([]repository.EventAnalysed)
	return ret0
}

// GetCurrentState indicates an expected call of GetCurrentState
func (mr *MockIAnalyserMockRecorder) GetCurrentState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentState", reflect.TypeOf((*MockIAnalyser)(nil).GetCurrentState))
}

// MockISessionManager is a mock of ISessionManager interface
type MockISessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockISessionManagerMockRecorder
}

// MockISessionManagerMockRecorder is the mock recorder for MockISessionManager
type MockISessionManagerMockRecorder struct {
	mock *MockISessionManager
}

// NewMockISessionManager creates a new mock instance
func NewMockISessionManager(ctrl *gomock.Controller) *MockISessionManager {
	mock := &MockISessionManager{ctrl: ctrl}
	mock.recorder = &MockISessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISessionManager) EXPECT() *MockISessionManagerMockRecorder {
	return m.recorder
}

// AuthMiddleware mocks base method
func (m *MockISessionManager) AuthMiddleware(username, password string, c echo.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthMiddleware", username, password, c)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthMiddleware indicates an expected call of AuthMiddleware
func (mr *MockISessionManagerMockRecorder) AuthMiddleware(username, password, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMiddleware", reflect.TypeOf((*MockISessionManager)(nil).AuthMiddleware), username, password, c)
}
